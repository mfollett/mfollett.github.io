<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl 5 | Matt Follett]]></title>
  <link href="http://mfollett.github.io/blog/categories/perl-5/atom.xml" rel="self"/>
  <link href="http://mfollett.github.io/"/>
  <updated>2013-04-28T21:33:57-05:00</updated>
  <id>http://mfollett.github.io/</id>
  <author>
    <name><![CDATA[Matt Follett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Perl to Groovy Mappings (An Introduction)]]></title>
    <link href="http://mfollett.github.io/perl-to-groovy-mappings/index.html"/>
    <updated>2011-08-27T00:00:00-05:00</updated>
    <id>http://mfollett.github.io/perl-to-groovy-mappings/perl-to-groovy-mappings</id>
    <content type="html"><![CDATA[<p>Recently I took a job with a startup that is using Groovy as their main language. I find the language to be similar to several other languages and they have <a href="http://groovy.codehaus.org/Differences+to+Other+Languages">some comparisons on their site</a>, however one comparison they are missing is to Perl. Since I'm learning Groovy anyway and the two are sufficiently similar that I thought I'd give it a shot.</p>


<p>Before I start with the articles there are a few important things to note about Groovy:</p>


<ol>
<li>Groovy autoboxes, as such it is completely legitimate to write `"I like cheese".someMethodOnStrings()`.</li>
<li>Groovy automatically makes a variable named `it` as the only parameter for lambda function if no parameter list is given, meaning that: `def foo = { it * 2}` is similar to `def foo = { it -&gt; it * 2}`.</li>
<li>Groovy's syntax provides an alternate way to list parameters for a method call when the last parameter is a lambda function meaning that `someData.someMethod(1,2, { it + 2})` is the same as `someData.someMethod(1,2) { it + 2}`, this is useful for methods that loop over lists, like `each`.</li>
</ol>


<p>&nbsp;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl  to Groovy Mapping (Iterating)]]></title>
    <link href="http://mfollett.github.io/perl-groovy-cheat-sheet/index.html"/>
    <updated>2011-08-27T00:00:00-05:00</updated>
    <id>http://mfollett.github.io/perl-groovy-cheat-sheet/perl-groovy-cheat-sheet</id>
    <content type="html"><![CDATA[<p>This entry will primarily go over various approaches towards iterating over structures of data. This will include basic looping as well as equivalents to Perl&rsquo;s <code>map</code> &amp; <code>grep</code>.</p>




<p>This is not intended to be an exhaustive guide or a best practice for either language. The attempt, as with all articles in this series, is to provide a basic set of mappings between the languages.</p>




<h2>Iterating over collections</h2>




<p>To loop over all the items in an array in Perl you would probably use the <code>for</code> loop construct:</p>




<div class="CodeRay">
  <div class="code"><pre>for my $item (@array) {…}</pre></div>
</div>




<p>You could do something similar in Groovy using the <code>each</code> method on collections:</p>




<div class="CodeRay">
  <div class="code"><pre>list.each {<span class="error">…</span>}</pre></div>
</div>




<p>To loop over all the keys in a hash (or Map) you can combine the above with the <code>keys</code> builtin:</p>




<div class="CodeRay">
  <div class="code"><pre>for my $key (keys(%hash)) {…}</pre></div>
</div>




<p>In Groovy you simply use a lambda that accepts two parameters.</p>




<div class="CodeRay">
  <div class="code"><pre>myMap.each { key, _value -&gt; <span class="error">…</span> }</pre></div>
</div>




<p>Looping over all the values is similar to the examples above in both, so I will skip that. Looping over each entry in the hash with both the key and value in Groovy is the same as the example above, in Perl you would have to use <code>each</code>, which I don&rsquo;t like.</p>




<p>It is important to note that with Groovy&rsquo;s <code>each</code> different things are passed in based on the number of parameters. The example above gave <code>each</code> a 2 parameter lambda and so the lambda got inputs of [key, value]. Had a 1 parameter lambda been passed in then that lambda would have received an Entry object that had accessors for the key and value.</p>




<h2>Iterating over a Set of Integers</h2>




<p>Both Perl and Groovy provide many ways to iterate over a range. One popular approach in Perl is to use the dot-dot range operator (..) and <code>for</code> looping construct. By using this it is simple to print all the numbers between one and ten:</p>




<div class="CodeRay">
  <div class="code"><pre>for my $num (1..10) { print $num }</pre></div>
</div>




<p>Groovy has a similar approach:</p>




<div class="CodeRay">
  <div class="code"><pre>(<span class="integer">1</span>..<span class="integer">10</span>).each { print <span class="local-variable">it</span> }</pre></div>
</div>




<p>Groovy has a couple other ways to do the same thing, for example numbers have an <code>upto</code> method attached to them that can be used to iterate. As such, the same thing above could be written as:</p>




<div class="CodeRay">
  <div class="code"><pre><span class="integer">1</span>.upto(<span class="integer">10</span>) { print <span class="local-variable">it</span> }</pre></div>
</div>




<p>Of course, Perl also has the ability to loop via the <code>while</code> looping construct and Groovy could loop using a <code>for in</code> on top of what I&rsquo;ve listed here.</p>




<p>If you wanted to iterate over a set of integers that didn&rsquo;t increment by one in Perl you might use <code>map</code> and <code>for</code> like this:</p>




<div class="CodeRay">
  <div class="code"><pre>for my $multiple_of_five ( map { $_ * 5 } 1..5) {…}</pre></div>
</div>




<p>Or you might use <code>grep</code> and <code>for</code> like this:</p>




<div class="CodeRay">
  <div class="code"><pre>for my $multiple_of_five ( grep { not $_ % 5 } 1..25) {…}</pre></div>
</div>




<p>Or, of course, you could pick up a useful module, like <a href="https://metacpan.org/module/Math::Sequence">Math::Sequence</a>.</p>




<p>In Groovy you would simply do this:</p>




<div class="CodeRay">
  <div class="code"><pre><span class="integer">5</span>.step(<span class="integer">25</span>,<span class="integer">5</span>) {<span class="error">…</span>}</pre></div>
</div>




<h2>Mapping a List</h2>




<p>Perl helpfully provides the <code>map</code> builtin to easily map a list of values from one to another. For example, were a developer wanting to square all the values in a list they would:</p>




<div class="CodeRay">
  <div class="code"><pre>my @squared = map { $_**2 } @original_values</pre></div>
</div>




<p>The same thing can be performed in Groovy using the collect() method on collections:</p>




<div class="CodeRay">
  <div class="code"><pre><span class="predefined-type">List</span> squared = originalValues.collect { <span class="local-variable">it</span>.power(<span class="integer">2</span>) }</pre></div>
</div>




<h2>Grepping a List</h2>




<p>Perl provides the <code>grep</code> builtin to easily filter values out of a list and provide a new list with only the remaining values. For example, if a developer was looking for all the items in a list that were odd they could:</p>




<div class="CodeRay">
  <div class="code"><pre>my @odd = grep { $_ % 2 } @numbers</pre></div>
</div>




<p>To do this in Groovy they would use the <code>findAll</code> method that exists on collections:</p>




<div class="CodeRay">
  <div class="code"><pre><span class="predefined-type">List</span> odd = numbers.findAll { <span class="local-variable">it</span> % <span class="integer">2</span> }</pre></div>
</div>




<h2>Grepping for the First Item in a List</h2>




<p>Perl has a number of modules which are considered &lsquo;core&rsquo;. It is reasonable to assume any core module is installed and readily available. To get the first item in a list that matches some criteria a Perl developer could use the example above for grepping a list and <code>shift</code> off the top, but more likely they would use <a href="https://metacpan.org/module/List::Util">List::Util</a>&rsquo;s <code>first</code> like this:</p>




<div class="CodeRay">
  <div class="code"><pre>my $first_odd = first { $_ % 2} @numbers</pre></div>
</div>




<p>A similar approach in Groovy could be done via the <code>find</code> method on collections:</p>




<div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> firstOdd = numbers.find { <span class="local-variable">it</span> % <span class="integer">2</span> }</pre></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If You Like X, You Might Like Perl]]></title>
    <link href="http://mfollett.github.io/if-you-like-x-you-might-like-perl/index.html"/>
    <updated>2010-10-16T00:00:00-05:00</updated>
    <id>http://mfollett.github.io/if-you-like-x-you-might-like-perl/if-you-like-x-you-might-like-perl</id>
    <content type="html"><![CDATA[<p><strong>Objective-C </strong>- You'd probably like <a href="http://search.cpan.org/~drolsky/Moose-1.15/lib/Moose/Manual.pod">Moose</a>'s concept of <a href="http://search.cpan.org/~drolsky/Moose-1.15/lib/Moose/Role.pm">roles</a>&nbsp;if you like categories. &nbsp;Roles also provide the ability to require methods exist on classes so you could use them for interfaces too, but when you consume a role you can't guarantee it won't add functionality.</p>


<p><strong>Clojure</strong>&nbsp;- If you were willing to play with <a href="http://rakudo.org/how-to-get-rakudo">Perl 6</a> you'd probably like the many of its lazy aspects. &nbsp;The common example being binding an infinitely long fib sequence to a list (my @fib := 0,1,*+*...* ). &nbsp;Perl 6 also supports multi-method dispatching and pattern matching. &nbsp;I don't know about Clojure's pattern matching abilities, but I do know that Perl 6's is weaker than Erlang's, so be aware of that.</p>


<p>If you don't want to try Perl 6 you should look at the Higher Order Perl book. &nbsp;It focuses on functional Perl and steals heavily from Lisp. &nbsp;In fact, the author states very early on that of the <a href="http://www.paulgraham.com/diff.html">7 things that make Lisp different</a>,&nbsp;Perl has 6. &nbsp;It is available <a href="http://hop.perl.plover.com/book/#PDF">free online</a>&nbsp;or from a book store. &nbsp;The author is currently boycotting Amazon though, so while they sell it you may want to buy from someone else.&nbsp;</p>


<p><strong>Ruby</strong> - I haven't gotten around to learning Ruby. &nbsp;For what it's worth, there are a lot of people I know that like both Ruby and Perl so I have to assume there are some good&nbsp;similarities. &nbsp;If you are looking for method_missing it is called autoload. &nbsp;Besides that, <a href="http://search.cpan.org/~drolsky/Moose-1.15/lib/Moose/Exporter.pm">Moose::Exporter</a> is great for making keywords for DSLs. &nbsp;You can use Perl 5's <a href="http://perldoc.perl.org/perlsub.html#Prototypes">prototypes</a>, but that gets a little more complicated. &nbsp;You can also use <a href="http://search.cpan.org/~flora/Devel-Declare-0.006000/lib/Devel/Declare.pm">Devel::Declare</a> if you just want to take the parser over altogether which, of course, is gets more complicated.</p>


<p>Feel free to add more in the comments or tell me where I'm wrong, I'll update the body of the post as the conversation goes along.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 4:  Currying]]></title>
    <link href="http://mfollett.github.io/week-3-currying/index.html"/>
    <updated>2010-09-19T00:00:00-05:00</updated>
    <id>http://mfollett.github.io/week-3-currying/week-3-currying</id>
    <content type="html"><![CDATA[<p>This week we'll be covering the process of partially applying parameters to a subroutine, this is based off of closures which we covered last week. &nbsp;This allows us to create new subroutines that we can pass around that already have some of their parameters defined. &nbsp;One of the benefits of this is that we don't have to pass around a parameter list and wait until all the parameters are ready, instead we can apply each parameter as we get it and then execute the subroutine at some later time when we are ready. &nbsp;Doing this in Perl is actually very simple.</p>


<p>
<script src="http://gist.github.com/556982.js?file=fpblog-week3a.pl"></script>
</p>


<p>The function above provides us the ability to curry other functions. &nbsp;Analyzing it shows that all we are doing is creating a new anonymous function that is going to call the function we passed in with the parameters we passed in and the parameters it receives. &nbsp;Let's see an example of how this would work.</p>


<p>
<script src="http://gist.github.com/556983.js?file=fpblog-week3b.pl"></script>
</p>


<p>So, let's look at how it all worked. &nbsp;First, we made a new anonymous function that takes a list of parameters, joins them, and prints them. &nbsp;Next we curried that list with 3 fruit. &nbsp;To do this we created a new anonymous subroutine that passed in the three fruit into the first anonymous subroutine. &nbsp;After that we repeated the process, by currying the new subroutine we created from the last curried we now have a subroutine that calls the subroutine created on line 3 with 2 new fruit, that subroutine calls the subroutine created on line 1. &nbsp;Once we execute this we will output a list of all the fruit we've given to the function.</p>


<p>We don't have to only curry anonymous functions. &nbsp;Because we can get the reference of named functions and builtins we can also curry those.</p>


<p>
<script src="http://gist.github.com/556984.js?file=fpblog-week3c.pl"></script>
</p>


<p>This concludes this week's lesson. &nbsp;Next week we will move past the building blocks of functional programming and start getting into systems built on top of this functional foundation. &nbsp;Next week we'll cover dynamic dispatch tables.</p>


<p>As an aside, the name curry didn't come from the tasty South Asian type of dish, unlike the <a href="http://listserv.linguistlist.org/cgi-bin/wa?A2=ind0208a&amp;L=ads-l&amp;P=11751">naming of Mix-Ins</a>. &nbsp;Instead, currying is named after the American Mathematician and Logician <a href="http://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 2:  Closures]]></title>
    <link href="http://mfollett.github.io/week-2-closures/index.html"/>
    <updated>2010-09-05T00:00:00-05:00</updated>
    <id>http://mfollett.github.io/week-2-closures/week-2-closures</id>
    <content type="html"><![CDATA[<p>This week we will be covering <em>closures</em>. &nbsp;Closures are another basic concept of functional programming. &nbsp;They are based right on top of anonymous functions so if you haven't read <a href="http://mfollett.com/26878051">last week's article</a> it would behoove you to do so.</p>


<p>Closures are subroutines that "close over" variables thereby storing them in the scope of the subroutine to be accessed later. &nbsp;Values stored in variables that exist within the scope of a function are guaranteed to exist as long as the function does. &nbsp;This allows a developer to create subroutines that do many useful things, including provide state and encapsulate values.</p>


<p>In Perl a subroutine can access variables defined anywhere lexically above it, even once the scope that it is in is left. &nbsp;This allows us to access otherwise lost data.</p>


<p>
<script src="http://gist.github.com/556960.js?file=fpblog-week2a.pl"></script>
</p>


<p>Whereas if we change this example to simply:</p>


<p>
<script src="http://gist.github.com/556961.js?file=fpblog-week2b.pl"></script>
</p>


<p>This code will fail at compilation time because $value isn't defined in the outer scope.</p>


<p>This is not unique to named functions, anonymous functions provide the same functionality:</p>


<p>
<script src="http://gist.github.com/556962.js?file=fpblog-week2c.pl"></script>
</p>


<p>We can use closures to create new subroutines that have some state stored in them. &nbsp;For example, here is a subroutine that returns a subroutine that takes numbers to the power of the variable that was closed over.</p>


<p>
<script src="http://gist.github.com/556963.js?file=fpblog-week2d.pl"></script>
</p>


<p>It is important to note in the example above that each time power_of_generator is called the new anonymous subroutine returned has a new value to $power and cannot interfere with any other subroutines value of $power.</p>


<p>Another useful ability that closures have is that they can safely encapsulate data, more safely than many of the OOP approaches in Perl.</p>


<p>
<script src="http://gist.github.com/556964.js?file=fpblog-week2e.pl"></script>
</p>


<p>It is important to note in the example above that $name cannot be accessed outside of the scope of the outer curly brackets. &nbsp;As such, there is no way to set $name to a value that is not title cased. &nbsp;This is because the only way to set name is through set_name() which will not accept a value that isn't title cased.</p>


<p>The example above only provides the ability to store one name in a running program. &nbsp;If we wanted to safely store multiple names we could do so by wrapping the $name and accompanying subs into a larger sub.</p>


<p>
<script src="http://gist.github.com/556965.js?file=fpblog-week2f.pl"></script>
</p>


<p>This concludes our discussion on closures. &nbsp;Next week we will move on to currying and a discussion on 'higher order' subroutines.</p>


<p>&nbsp;</p>

]]></content>
  </entry>
  
</feed>
